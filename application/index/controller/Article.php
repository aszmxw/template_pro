<?php
namespace app\index\controller;

use app\common\controller\Common;
use org\Page;
use org\RedisRanking\DummyDayDataSource;
use org\RedisRanking\Ranking\DailyRanking;
use org\RedisRanking\Ranking\MonthlyRanking;
use org\RedisRanking\Ranking\TotalRanking;
use org\RedisRanking\Ranking\WeeklyRanking;
use org\RedisRanking\RankingManger;
use think\facade\Cache;
use think\facade\Config;
use think\helper\Time;

class Article extends Common
{

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

    }

    /**
     * txt下载
     * @param int $primary_id
     * @return mixed
     * @throws
     */
    public function txt($primary_id = 0)
    {
        $article = model('article')->where('PrimaryId','eq',get_cut_value($primary_id))->cache()->find()->toArray();
        //获取当前分类
        $article['category'] = get_category($article['Cid']);


        $this->site_seo('txt');
        return $this->fetch("txt",['current_cate' => $article['category'] , 'novel' => $article]);
    }

    /**
     * 作者页面
     * @param string $name
     * @return mixed
     * @throws
     */
    public function author($name = '')
    {
        if (empty($name)) {
            $this->error("作者不能为空!");
        }

        $search_list = model("article")->whereIn("Cid",get_all_sub_cid_list())->where('Author','like',$name)->order('UpdateTime','desc')->cache()->select()->toArray();

        $this->site_seo('author',array('author' => $name));
        return $this->fetch('author', [ 'author' => $name,'list' => $search_list]);
    }

    /**
     * 移动端小说列表
     * @param int $id
     * @return mixed
     * @throws
     */
    public function book_list ($id = 0) {
        $article = model('article')->where('PrimaryId','eq',get_cut_value($id))->cache()->find()->toArray();
        $category = get_category($article['Cid']);

        $all_chapter_list = get_all_chapter_list($article['_id'],$article['SourceList'],0,0);
        $article['chapter_list'] = $all_chapter_list['chapter_list'];

        $article['page'] = "";
        $this->site_seo('details',array('details' => $article,'category_name' => $category['name']));

        return $this->fetch("book_list",['novel' => $article]);
    }

    /**
     * 更新缓存
     */
    public function update_cache (){
        $primary_id = $this->request->param('primary_id');
        $last_chapter_sort = get_cut_value($this->request->param('last_chapter_sort'));
        $article_url = base64_decode($this->request->param('article_url'));
        $last_chapter_url = base64_decode($this->request->param('last_chapter_url'));

        $cache_key = md5("cache_list_" . $last_chapter_sort . get_cut_value($primary_id));
        if (Cache::has($cache_key)) {

            $list = Cache::get($cache_key);
            $this->echoJson($list,200,"更新成功!");

        }else {

            $result = curl_server("api_v1/spider_chapter_list",array(
                'site_id' => $this->site_config['site_id'],
                'primary_id' => get_cut_value($primary_id),
                'article_url' => $article_url,
                'chapter_url' => $last_chapter_url,
            ),"http://127.0.0.1:1122");

            $list = $result['data'];

            if (!empty($list)) {

                $article = model('article')->where('PrimaryId','eq',get_cut_value($primary_id))->field("SourceList")->find()->toArray();

                foreach ($list as $key => $item) {
                    $list[$key]['primary_id'] = $primary_id;
                    $sort = get_offset_sort((int)$last_chapter_sort + $key + 1,$article['SourceList'],$article_url);
                    $list[$key]['sort'] = $sort;
                    //设置缓存
                    Cache::set("cache_chapter_" . get_cut_value($primary_id) . "_" . $sort,$list[$key],60);
                }

                $list = array_reverse($list);
                Cache::set($cache_key,$list,5);
                $this->echoJson($list,200,"更新成功!");
            }else {
                $this->echoJson("",404,"暂无更新");
            }

        }
    }

}

